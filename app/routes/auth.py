from flask import Blueprint, render_template, redirect, url_for, flash
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from app.forms import LoginForm, RegistrationForm
from app.models import User, db

from app import mail
from flask_mail import Message
from app.forms import ResetPasswordForm
from app.forms import RequestResetForm
from app.models import Role


auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard.index'))

    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and check_password_hash(user.password_hash, form.password.data):
            login_user(user)
            if user.role.name == 'admin':
                return redirect(url_for('admin.admin_dashboard'))
            else:
                return redirect(url_for('dashboard.index'))
        else:
            flash('–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å.', 'danger')
    return render_template('login.html', form=form)
    

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('dashboard.index'))

    form = RegistrationForm()
    if form.validate_on_submit():
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
        if User.query.filter_by(username=form.username.data).first():
            flash('–¶–µ —ñ–º‚Äô—è –≤–∂–µ –∑–∞–π–Ω—è—Ç–µ.', 'danger')
            return render_template('register.html', form=form)
        if User.query.filter_by(email=form.email.data).first():
            flash('–¶–µ–π email –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è.', 'danger')
            return render_template('register.html', form=form)

        # üîπ –û—Ç—Ä–∏–º—É—î–º–æ —Ä–æ–ª—å "user" –∑ —Ç–∞–±–ª–∏—Ü—ñ roles
        default_role = Role.query.filter_by(name='user').first()
        if not default_role:
            flash("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ä–æ–ª—å 'user'. –°—Ç–≤–æ—Ä—ñ—Ç—å —ó—ó –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö.", 'danger')
            return render_template('register.html', form=form)

        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        hashed_password = generate_password_hash(form.password.data)
        new_user = User(
            username=form.username.data,
            email=form.email.data,
            password_hash=hashed_password,
            role_id=default_role.id  # üîπ –ó–∞–º—ñ—Å—Ç—å role='user'
        )
        db.session.add(new_user)
        db.session.commit()

        flash('–£—Å–ø—ñ—à–Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è! –¢–µ–ø–µ—Ä —É–≤—ñ–π–¥—ñ—Ç—å.', 'success')
        return redirect(url_for('auth.login'))

    return render_template('register.html', form=form)


@auth_bp.route('/logout')
@login_required
def logout():
    logout_user()
    flash('–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–∫–∞—É–Ω—Ç—É.', 'info')
    return redirect(url_for('auth.login'))

@auth_bp.route('/reset_password', methods=['GET', 'POST'])
def reset_request():
    form = RequestResetForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user:
            send_reset_email(user)
            flash('–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–∞ –Ω–∞ –≤–∞—à—É –ø–æ—à—Ç—É.', 'info')
        else:
            flash('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–æ—é –ø–æ—à—Ç–æ—é –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 'danger')
        return redirect(url_for('auth.login'))
    return render_template('auth/reset_request.html', form=form)

from app.utils.email import send_reset_email

@auth_bp.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_token(token):
    user = User.verify_reset_token(token)
    if not user:
        flash('–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π —Ç–æ–∫–µ–Ω', 'warning')
        return redirect(url_for('auth.reset_request'))

    form = ResetPasswordForm()
    if form.validate_on_submit():
        hashed_password = generate_password_hash(form.password.data)
        user.password_hash = hashed_password
        db.session.commit()
        flash('–í–∞—à –ø–∞—Ä–æ–ª—å –æ–Ω–æ–≤–ª–µ–Ω–æ. –¢–µ–ø–µ—Ä –≤–∏ –º–æ–∂–µ—Ç–µ —É–≤—ñ–π—Ç–∏.', 'success')
        return redirect(url_for('auth.login'))

    return render_template('auth/reset_token.html', form=form)

